---
title: TabHub Public API Reference

language_tabs: # must be one of https://github.com/rouge-ruby/rouge/wiki/List-of-supported-languages-and-lexers
  - shell
  # - ruby
  # - python
  # - javascript
  - php

toc_footers:
  - <a href='#'>Request an OAuth Client</a>
  - <a href='https://github.com/slatedocs/slate'>Documentation Powered by Slate</a>

includes:
  - areas
  - availability
  - bookings
  - activities
  - groups
  - members
  - reporting
  - tables
  - tabs
  - orders
  - line-item-resources
  - errors

search: true

code_clipboard: true

meta:
  - name: description
    content: Documentation for the TabHub Public API
---

# Introduction

## Version History

Version | Description | Date
-------------- | -------------- | --------------
1.0 | Initial Release | 2023-02-15

## Overview

The TabHub Public API is built around RESTful practices and designed to receive data via HTTPS requests. The following sections describe each action that is available and the information the system expects to receive in the request and the information that is returned in the response.

Access to the TabHub API is secured via OAuth2. Each third party will have an access token that needs to be passed in conjunction with each subsequent request.

The OAuth2 password grant allows you to obtain an access token by using an email address and password of an existing TabHub user. You will gain a short lived access token and a longer life refresh token, which is used to update your short lived tokens and keep you connected.

This document will also provide examples of each request and response in a JSON format.

Responses from the TabHub API will include a suitable HTTP header such as 200, 404 or 401 for the header portion of the response.

You should never expose your Access Token, Refresh token, username or password to anyone or in any client-side web application.

# Authentication

## Obtaining an Access Token & Refresh Token

> Obtaining an Access Token & Refresh Token

```php
$http = new GuzzleHttp\Client;

$response = $http->post('https://mysite.rposcloud.com/oauth/token', [
   'form_params' => [
      'grant_type' => 'password',
      'client_id' => 'your-client-id',
      'client_secret' => 'your-client-secret',
      'username' => 'your-tabhub-email-address',
      'password' => 'your-tabhub-password',
      'scope' => '*'
    ],
]);

return json_decode((string) $response->getBody(), true);
```

> The above command returns JSON structured like this:

```json
{
   token_type: "Bearer",
   expires_in: 1296000,
   access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImF....",
   refresh_token: "def50200b0fb5bd8ed0c08cef8951d7664d4605ac747...."
}
```

To obtain an access and refresh token paid you must make the following Authorisation request via POST. You must supply a valid TabHub Email Address and Password combination which you will have received when you signed up to BarTab. You will also need a client_id and client_secret which will be granted to you by Tabology on request. In this example, weâ€™ll use the Guzzle HTTP library to gain the tokens:

## Refreshing Tokens

> Refreshing Tokens

```php
$http = new GuzzleHttp\Client;

$response = $http->post('http://mysite.rposcloud.com/oauth/token', [
    'form_params' => [
        'grant_type' => 'refresh_token',
        'refresh_token' => 'the-refresh-token',
        'client_id' => 'client-id',
        'client_secret' => 'client-secret'
    ],
]);

return json_decode((string) $response->getBody(), true);
```

Typically access tokens are only short lived for up to 15 days. Refresh tokens will expire after 30 days.

If your access token expires, you will need to use the refresh token to generate a new one. The refresh token was provided when the original token was issued. In this example, we'll use the Guzzle HTTP library to refresh the access token:

# API Resources

## Base Requests

The Base URL for all TabHub API requests is `https://mysite.rposcloud.com/` where `mysite` is the site you have connected to.

## Request Headers

> Request headers example

```php
$client = new GuzzleHttp\Client;

$response = $client->request('GET', '/api/member', [
    'headers' => [
        'Accept' => 'application/json',
        'Authorization' => 'Bearer ' . $accessToken,
    ],
]);
```

When calling any API route, your application's API consumers should specify their **Access Token as a Bearer token** in the `Authorization` header of the request. You must also set the `Accept` header to use `application/json` For example, when using the Guzzle HTTP library:
